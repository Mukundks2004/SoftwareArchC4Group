@startuml University_Course_Management_System_Container
!include https://raw.githubusercontent.com/kirchsth/C4-PlantUML/extended/C4_Container.puml

AddRelTag("sync", $textColor="black", $lineColor="black", $lineStyle = DashedLine())
AddRelTag("event", $textColor="blue", $lineColor="blue", $lineStyle = DottedLine())

LAYOUT_WITH_LEGEND()

title University Course Management System - Container Diagram (with API Gateway and Data Analytics Integration)

skinparam Arrow {
  FontColor black
  CaptionFontStyle bold
  Color black
  Style dashed
}

' External users (actors)
Person(student, "Student", "Interacts with the web application to enroll in courses and view records.")
Person(faculty, "Faculty", "Manages courses, views student performance, and updates records.")
Person(admin, "Administrator", "Manages courses, student records, and generates reports.")

' Main system - UCMS
System(UCMS, "University Course Management System", "Handles course enrollment, student records, reporting, and integration with external services.") {

    ' Web Application and Gateway
    Container(webApp, "Web Application", "Vue.js", "Provides an interface for students, faculty, and admins.")
    Container(apiGateway, "API Gateway", "Spring Boot", "Routes requests to the appropriate microservices and manages authentication.")
    
    ' Microservices
    Container(courseService, "Course Enrollment Service", "Spring Boot", "Manages course offerings, enrollments, and updates.")
    Container(studentService, "Student Record Service", "Spring Boot", "Handles student academic records and data storage.")
    Container(reportingService, "Reporting Service", "Spring Boot", "Generates academic performance and enrollment reports.")
    Container(authService, "Authentication Service", "OAuth 2.0", "Manages user authentication and role-based access control.")
    Container(notificationService, "Notification Service", "Spring Boot", "Sends notifications and updates to users based on events.")
    Container(backupService, "Backup Service", "Cloud Backup", "Backs up student and course data to ensure recoverability.")
    
    ' Databases
    ContainerDb(academicDb, "Academic Records Database", "PostgreSQL", "Stores student records, course data, and enrollment history.")
    ContainerDb(dataWarehouse, "Data Warehouse", "PostgreSQL (OLAP)", "Stores historical and aggregated data for analytics and reporting.")
    Container(etlPipeline, "ETL Pipeline", "Python/Spark", "Extracts, transforms, and loads data from operational systems to the data warehouse.")
}

' External systems
System_Ext(SIS, "Student Information System (SIS)", "External system for managing student and course data.")
System_Ext(authSystem, "University SSO", "Handles Single Sign-On (SSO) for user authentication.")
System_Ext(backupSystem, "Cloud Backup System", "Provides cloud-based data backup and recovery.")
System_Ext(dataAnalytics, "Data Analytics System", "Processes and analyzes academic data for reporting and insights.")

' Relationships between users and UCMS
Rel(student, webApp, "Enrolls in courses and views records", $tags="sync")
Rel(faculty, webApp, "Manages courses and views student performance", $tags="sync")
Rel(admin, webApp, "Generates reports and manages courses", $tags="sync")

' Web application routing requests
Rel(webApp, apiGateway, "Routes requests to microservices", $tags="sync")

' API Gateway to microservices
Rel(apiGateway, courseService, "Handles course enrollment requests", $tags="sync")
Rel(apiGateway, studentService, "Handles student academic records", $tags="sync")
Rel(apiGateway, reportingService, "Generates reports", $tags="sync")
Rel(apiGateway, authService, "Handles authentication", $tags="sync")

' Microservices to databases
Rel(courseService, academicDb, "Reads/Writes course enrollment data", $tags="sync")
Rel(studentService, academicDb, "Reads/Writes student academic data", $tags="sync")
Rel(reportingService, dataWarehouse, "Generates reports from historical data", $tags="sync")
Rel(etlPipeline, academicDb, "Extracts data from operational systems", $tags="sync")
Rel(etlPipeline, dataWarehouse, "Loads transformed data into the data warehouse", $tags="sync")

' Event-driven architecture interactions
Rel_L(courseService, notificationService, "Notifies students on enrollment success/failure", $tags="event")
Rel_R(studentService, notificationService, "Notifies students on academic record updates", $tags="event")

' Backup Service interactions
Rel(backupService, backupSystem, "Backs up academic and course data", $tags="sync")
Rel(backupService, academicDb, "Backs up student records and course data", $tags="sync")
Rel(backupService, dataWarehouse, "Backs up historical data", $tags="sync")

' External system interactions
Rel(authService, authSystem, "Authenticates users via SSO", $tags="sync")
Rel(reportingService, dataAnalytics, "Provides academic data for analysis and insights", $tags="sync")
Rel(dataAnalytics, reportingService, "Processes course and student performance data", $tags="sync")

' Relationships with SIS
Rel(courseService, SIS, "Syncs course data with SIS", $tags="sync")
Rel(studentService, SIS, "Syncs student data with SIS", $tags="sync")

@enduml
