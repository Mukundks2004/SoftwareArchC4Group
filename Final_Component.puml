@startuml UCMS_Component_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
AddRelTag("sync", $textColor="black", $lineColor="black", $lineStyle = DashedLine())

LAYOUT_WITH_LEGEND()

title UCMS - Component Diagram (with Data Analytics Integration)

' Define main system boundary for UCMS
System_Boundary(UCMS, "University Course Management System") {

    ' API Gateway
    Container(apiGateway, "API Gateway", "Spring Bean", "Routes HTTP requests to appropriate microservices.") {
        
        ' Controllers
        Component(courseController, "CourseController", "Handles course enrollment and management requests.")
        Component(studentController, "StudentController", "Handles student-related requests, including academic records.")

        ' Services
        Component(courseService, "CourseService", "Manages course enrollment, availability, and updates.")
        Component(studentService, "StudentService", "Manages student academic records and updates.")
        Component(reportingService, "ReportingService", "Generates academic and enrollment reports, sends data for analysis.")
        Component(authService, "AuthService", "Handles authentication and access control using OAuth 2.0.")
        Component(notificationService, "NotificationService", "Sends event-based notifications, like enrollment success.")
        Component(backupService, "BackupService", "Manages backups of academic records and course data.")
    }

    ' Repositories
    Container(courseRepository, "CourseRepository", "Spring Bean", "Handles CRUD operations for courses.")
    Container(studentRepository, "StudentRepository", "Spring Bean", "Handles CRUD operations for student records.")

    ' Data Pipeline and Storage
    Container(etlPipeline, "ETL Pipeline", "Python/Spark", "Extracts data from operational systems and loads it into the data warehouse.")
    ContainerDb(academicDb, "Academic Records Database", "PostgreSQL", "Stores student records, course data, and enrollment history.")
    ContainerDb(dataWarehouse, "Data Warehouse", "PostgreSQL (OLAP)", "Stores historical and aggregated data for analytics and reporting.")
}

' Define External Systems
System_Ext(SIS, "Student Information System", "External System", "Syncs student and course data with UCMS.")
System_Ext(authSystem, "University SSO", "External Authentication System", "Handles Single Sign-On (SSO) for authentication.")
System_Ext(backupSystem, "Cloud Backup System", "External Backup System", "Provides cloud-based backup and recovery.")
System_Ext(dataAnalytics, "Data Analytics System", "Processes and analyzes academic data for insights and reporting.")

' Relationships between components
Rel(courseController, courseService, "Handles course-related requests", $tags="sync")
Rel(studentController, studentService, "Handles student record-related requests", $tags="sync")
Rel(courseService, courseRepository, "Handles CRUD operations for courses", $tags="sync")
Rel(studentService, studentRepository, "Handles CRUD operations for student records", $tags="sync")
Rel(reportingService, dataWarehouse, "Generates reports from historical data", $tags="sync")
Rel(etlPipeline, academicDb, "Extracts data from operational systems", $tags="sync")
Rel(etlPipeline, dataWarehouse, "Loads transformed data into the data warehouse", $tags="sync")

' External system interactions
Rel(authService, authSyastem, "Authenticates users via SSO", $tags="sync")
Rel(backupService, backupSystem, "Backs up course and academic data", $tags="sync")
Rel(reportingService, dataAnalytics, "Provides academic data for analysis", $tags="sync")
Rel(dataAnalytics, reportingService, "Processes course and student data", $tags="sync")

' Relationships with SIS
Rel(courseService, SIS, "Syncs course data with SIS", $tags="sync")
Rel(studentService, SIS, "Syncs student data with SIS", $tags="sync")

@enduml
